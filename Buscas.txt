public Double buscarFaturamentoDoDia(Long restauranteId) {
        QReservaEntity reserva = QReservaEntity.reservaEntity;
        QPedidoEntity pedido = QPedidoEntity.pedidoEntity;

        LocalDate hoje = LocalDate.now();

        var query = new JPAQuery<>(em);

        // Calcula o faturamento total do dia somando o valor dos pedidos de cada reserva
        Double faturamentoDoDia = query
            .select(pedido.valor.sum())  // Soma dos valores dos pedidos
            .from(reserva)
            .join(reserva.pedidos, pedido)  // Faz o join das reservas com os pedidos
            .where(reserva.restaurante.id.eq(restauranteId)
                .and(reserva.dataReserva.eq(hoje)))  // Filtra por restaurante e data do dia atual
            .fetchOne();

        return faturamentoDoDia != null ? faturamentoDoDia : 0.0;  // Retorna 0 se não houver reservas
    }

----------------------------------------------------

 @Override
    public List<PedidoEntity> buscarPedidosPorParametros(LocalDate data, Double valor, StatusEnum status, Long clienteId) {
        QPedidoEntity pedido = QPedidoEntity.pedidoEntity;
        QClienteEntity cliente = QClienteEntity.clienteEntity;

        var query = new JPAQuery<>(em);

        // Inicia a query básica
        query.from(pedido)
            .leftJoin(pedido.cliente, cliente)
            .where(pedido.isNotNull())  // Garante que há um início válido, depois aplicamos filtros opcionais
            .orderBy(pedido.valor.desc());  // Ordenação por valor descrescente

        // Adiciona parâmetros opcionais aos filtros
        if (data != null) {
            query.where(pedido.data.eq(data));
        }
        if (valor != null) {
            query.where(pedido.valor.eq(valor));
        }
        if (status != null) {
            query.where(pedido.status.eq(status));
        }
        if (clienteId != null) {
            query.where(cliente.id.eq(clienteId));
        }

        // Executa a consulta
        return query.fetch();
    }

------------------------------------------Controller

@RestController
public class PedidoController {

    @Autowired
    private PedidoService pedidoService;

    @GetMapping("/pedidos")
    public List<PedidoEntity> buscarPedidos(
            @RequestParam(value = "data", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate data,
            @RequestParam(value = "valor", required = false) Double valor,
            @RequestParam(value = "status", required = false) StatusEnum status,
            @RequestParam(value = "clienteId", required = false) Long clienteId) {

        return pedidoService.buscarPedidosPorParametros(data, valor, status, clienteId);
    }